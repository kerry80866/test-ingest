// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: event.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DexType int32

const (
	DexType_DEX_UNKNOWN        DexType = 0 // 未知 DEX 类型
	DexType_DEX_RAYDIUM_V4     DexType = 1 // Raydium V4（限价订单簿 + AMM）
	DexType_DEX_RAYDIUM_CLMM   DexType = 2 // Raydium CLMM（集中流动性）
	DexType_DEX_PUMPFUN_AMM    DexType = 3 // Pump.fun AMM 外盘
	DexType_DEX_PUMPFUN        DexType = 4 // Pump.fun 内盘（伪撮合）
	DexType_DEX_RAYDIUM_CPMM   DexType = 5 // Raydium CPMM
	DexType_DEX_METEORA_DLMM   DexType = 6 // Meteora DLMM
	DexType_DEX_ORCA_WHIRLPOOL DexType = 7 // Orca Whirlpool（集中流动性）
)

// Enum value maps for DexType.
var (
	DexType_name = map[int32]string{
		0: "DEX_UNKNOWN",
		1: "DEX_RAYDIUM_V4",
		2: "DEX_RAYDIUM_CLMM",
		3: "DEX_PUMPFUN_AMM",
		4: "DEX_PUMPFUN",
		5: "DEX_RAYDIUM_CPMM",
		6: "DEX_METEORA_DLMM",
		7: "DEX_ORCA_WHIRLPOOL",
	}
	DexType_value = map[string]int32{
		"DEX_UNKNOWN":        0,
		"DEX_RAYDIUM_V4":     1,
		"DEX_RAYDIUM_CLMM":   2,
		"DEX_PUMPFUN_AMM":    3,
		"DEX_PUMPFUN":        4,
		"DEX_RAYDIUM_CPMM":   5,
		"DEX_METEORA_DLMM":   6,
		"DEX_ORCA_WHIRLPOOL": 7,
	}
)

func (x DexType) Enum() *DexType {
	p := new(DexType)
	*p = x
	return p
}

func (x DexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DexType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (DexType) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x DexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DexType.Descriptor instead.
func (DexType) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

// 枚举定义：统一的事件类型标识
type EventType int32

const (
	EventType_UNKNOWN EventType = 0
	// --- 常规交易/流动性类事件 ---
	EventType_TRADE_BUY        EventType = 1
	EventType_TRADE_SELL       EventType = 2
	EventType_TRANSFER         EventType = 3
	EventType_ADD_LIQUIDITY    EventType = 4
	EventType_REMOVE_LIQUIDITY EventType = 5
	EventType_MINT_TO          EventType = 6
	EventType_BURN             EventType = 7
	EventType_TRADE_UNKNOWN    EventType = 8
	EventType_CREATE_POOL      EventType = 9
	EventType_MIGRATE          EventType = 10
	EventType_LAUNCHPAD_TOKEN  EventType = 11
	// --- 系统/同步类事件（编号从 60 开始） ---
	EventType_BALANCE_UPDATE EventType = 60
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "TRADE_BUY",
		2:  "TRADE_SELL",
		3:  "TRANSFER",
		4:  "ADD_LIQUIDITY",
		5:  "REMOVE_LIQUIDITY",
		6:  "MINT_TO",
		7:  "BURN",
		8:  "TRADE_UNKNOWN",
		9:  "CREATE_POOL",
		10: "MIGRATE",
		11: "LAUNCHPAD_TOKEN",
		60: "BALANCE_UPDATE",
	}
	EventType_value = map[string]int32{
		"UNKNOWN":          0,
		"TRADE_BUY":        1,
		"TRADE_SELL":       2,
		"TRANSFER":         3,
		"ADD_LIQUIDITY":    4,
		"REMOVE_LIQUIDITY": 5,
		"MINT_TO":          6,
		"BURN":             7,
		"TRADE_UNKNOWN":    8,
		"CREATE_POOL":      9,
		"MIGRATE":          10,
		"LAUNCHPAD_TOKEN":  11,
		"BALANCE_UPDATE":   60,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[1].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[1]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

// slot级别的事件数组（封装一个 slot 的全部事件）
type Events struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       uint32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                           // 批量消息结构版本号（用于升级兼容）
	ChainId       uint32                 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`            // 链 ID，例如 100000 = Solana
	Slot          uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                                 // 所属 slot
	Source        int32                  `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`                             // 数据来源：1=GRPC补块，2=RPC推送
	Events        []*Event               `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`                              // 事件数组
	BlockHash     []byte                 `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`       // 区块哈希（blockhash）
	QuotePrices   []*TokenPrice          `protobuf:"bytes,7,rep,name=quote_prices,json=quotePrices,proto3" json:"quote_prices,omitempty"` // 右对报价币价格（例如 USDC/USDT/WSOL）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Events) Reset() {
	*x = Events{}
	mi := &file_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *Events) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Events) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Events) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Events) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Events) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Events) GetQuotePrices() []*TokenPrice {
	if x != nil {
		return x.QuotePrices
	}
	return nil
}

// 单个报价币的价格信息
type TokenPrice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         []byte                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`        // 报价币的 mint 地址
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`      // 报价币对应的 USD 价格（每 1 个 token 的美元价值，不是最小单位，例如 150.0 表示 1 个 token = $150）
	Decimals      uint32                 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"` // token 精度（如 USDC 是 6，WSOL 是 9）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenPrice) Reset() {
	*x = TokenPrice{}
	mi := &file_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenPrice) ProtoMessage() {}

func (x *TokenPrice) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenPrice.ProtoReflect.Descriptor instead.
func (*TokenPrice) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *TokenPrice) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenPrice) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TokenPrice) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

// 通用事件包装结构（每条只封装一个子类型）
type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*Event_Trade
	//	*Event_Transfer
	//	*Event_Liquidity
	//	*Event_Mint
	//	*Event_Burn
	//	*Event_Balance
	//	*Event_Migrate
	//	*Event_Token
	Event         isEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetEvent() isEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event) GetTrade() *TradeEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Trade); ok {
			return x.Trade
		}
	}
	return nil
}

func (x *Event) GetTransfer() *TransferEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Transfer); ok {
			return x.Transfer
		}
	}
	return nil
}

func (x *Event) GetLiquidity() *LiquidityEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Liquidity); ok {
			return x.Liquidity
		}
	}
	return nil
}

func (x *Event) GetMint() *MintToEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Mint); ok {
			return x.Mint
		}
	}
	return nil
}

func (x *Event) GetBurn() *BurnEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Burn); ok {
			return x.Burn
		}
	}
	return nil
}

func (x *Event) GetBalance() *BalanceUpdateEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Balance); ok {
			return x.Balance
		}
	}
	return nil
}

func (x *Event) GetMigrate() *MigrateEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Migrate); ok {
			return x.Migrate
		}
	}
	return nil
}

func (x *Event) GetToken() *LaunchpadTokenEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_Token); ok {
			return x.Token
		}
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Trade struct {
	Trade *TradeEvent `protobuf:"bytes,1,opt,name=trade,proto3,oneof"`
}

type Event_Transfer struct {
	Transfer *TransferEvent `protobuf:"bytes,2,opt,name=transfer,proto3,oneof"`
}

type Event_Liquidity struct {
	Liquidity *LiquidityEvent `protobuf:"bytes,3,opt,name=liquidity,proto3,oneof"`
}

type Event_Mint struct {
	Mint *MintToEvent `protobuf:"bytes,4,opt,name=mint,proto3,oneof"`
}

type Event_Burn struct {
	Burn *BurnEvent `protobuf:"bytes,5,opt,name=burn,proto3,oneof"`
}

type Event_Balance struct {
	Balance *BalanceUpdateEvent `protobuf:"bytes,6,opt,name=balance,proto3,oneof"`
}

type Event_Migrate struct {
	Migrate *MigrateEvent `protobuf:"bytes,7,opt,name=migrate,proto3,oneof"`
}

type Event_Token struct {
	Token *LaunchpadTokenEvent `protobuf:"bytes,8,opt,name=token,proto3,oneof"`
}

func (*Event_Trade) isEvent_Event() {}

func (*Event_Transfer) isEvent_Event() {}

func (*Event_Liquidity) isEvent_Event() {}

func (*Event_Mint) isEvent_Event() {}

func (*Event_Burn) isEvent_Event() {}

func (*Event_Balance) isEvent_Event() {}

func (*Event_Migrate) isEvent_Event() {}

func (*Event_Token) isEvent_Event() {}

// 交易事件（token统一表示base token）
type TradeEvent struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Type              EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`          // 事件类型（TRADE_BUY / TRADE_SELL / TRADE_UNKNOWN）
	EventId           uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`       // 事件唯一ID（slot << 32 | tx_index << 16 | ix_index << 8 | inner_index）
	Slot              uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                            // 区块 slot
	BlockTime         int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"` // 区块时间（Unix 秒）
	TxHash            []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`           // 交易哈希（64 字节）
	Signers           [][]byte               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`                       // 签名者地址列表（通常为交易的发起者们）
	TokenDecimals     uint32                 `protobuf:"varint,7,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	QuoteDecimals     uint32                 `protobuf:"varint,8,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`
	Dex               uint32                 `protobuf:"varint,9,opt,name=dex,proto3" json:"dex,omitempty"`                                                        // 所属 DEX 平台编号（如 1 = RaydiumV4，2 = RaydiumCLMM）
	AmountUsd         float64                `protobuf:"fixed64,10,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`                         // 交易成交总额（单位 USD，保留浮点精度，例：159.45 表示 $159.45）
	PriceUsd          float64                `protobuf:"fixed64,11,opt,name=price_usd,json=priceUsd,proto3" json:"price_usd,omitempty"`                            // base token 单价（单位 USD，例：100.23 表示每个 token $100.23）
	TokenAmount       uint64                 `protobuf:"varint,12,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`                    // base token 实际成交数量（原生最小单位）
	QuoteTokenAmount  uint64                 `protobuf:"varint,13,opt,name=quote_token_amount,json=quoteTokenAmount,proto3" json:"quote_token_amount,omitempty"`   // quote token 实际成交数量（原生最小单位）
	Token             []byte                 `protobuf:"bytes,14,opt,name=token,proto3" json:"token,omitempty"`                                                    // base token 的 mint 地址
	QuoteToken        []byte                 `protobuf:"bytes,15,opt,name=quote_token,json=quoteToken,proto3" json:"quote_token,omitempty"`                        // quote token 的 mint 地址
	PairAddress       []byte                 `protobuf:"bytes,16,opt,name=pair_address,json=pairAddress,proto3" json:"pair_address,omitempty"`                     // 池子地址（如 Raydium 的池子地址）
	TokenAccount      []byte                 `protobuf:"bytes,17,opt,name=token_account,json=tokenAccount,proto3" json:"token_account,omitempty"`                  // 池子base token的账户地址
	QuoteTokenAccount []byte                 `protobuf:"bytes,18,opt,name=quote_token_account,json=quoteTokenAccount,proto3" json:"quote_token_account,omitempty"` // 池子quote token的账户地址
	UserWallet        []byte                 `protobuf:"bytes,19,opt,name=user_wallet,json=userWallet,proto3" json:"user_wallet,omitempty"`                        // 用户钱包地址
	PairTokenBalance  uint64                 `protobuf:"varint,20,opt,name=pair_token_balance,json=pairTokenBalance,proto3" json:"pair_token_balance,omitempty"`   // 交易后池子base token余额
	PairQuoteBalance  uint64                 `protobuf:"varint,21,opt,name=pair_quote_balance,json=pairQuoteBalance,proto3" json:"pair_quote_balance,omitempty"`   // 交易后池子quote token余额
	UserTokenBalance  uint64                 `protobuf:"varint,22,opt,name=user_token_balance,json=userTokenBalance,proto3" json:"user_token_balance,omitempty"`   // 交易后用户base token余额
	UserQuoteBalance  uint64                 `protobuf:"varint,23,opt,name=user_quote_balance,json=userQuoteBalance,proto3" json:"user_quote_balance,omitempty"`   // 交易后用户quote token余额
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TradeEvent) Reset() {
	*x = TradeEvent{}
	mi := &file_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeEvent) ProtoMessage() {}

func (x *TradeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeEvent.ProtoReflect.Descriptor instead.
func (*TradeEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *TradeEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *TradeEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *TradeEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *TradeEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *TradeEvent) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TradeEvent) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *TradeEvent) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *TradeEvent) GetQuoteDecimals() uint32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

func (x *TradeEvent) GetDex() uint32 {
	if x != nil {
		return x.Dex
	}
	return 0
}

func (x *TradeEvent) GetAmountUsd() float64 {
	if x != nil {
		return x.AmountUsd
	}
	return 0
}

func (x *TradeEvent) GetPriceUsd() float64 {
	if x != nil {
		return x.PriceUsd
	}
	return 0
}

func (x *TradeEvent) GetTokenAmount() uint64 {
	if x != nil {
		return x.TokenAmount
	}
	return 0
}

func (x *TradeEvent) GetQuoteTokenAmount() uint64 {
	if x != nil {
		return x.QuoteTokenAmount
	}
	return 0
}

func (x *TradeEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TradeEvent) GetQuoteToken() []byte {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

func (x *TradeEvent) GetPairAddress() []byte {
	if x != nil {
		return x.PairAddress
	}
	return nil
}

func (x *TradeEvent) GetTokenAccount() []byte {
	if x != nil {
		return x.TokenAccount
	}
	return nil
}

func (x *TradeEvent) GetQuoteTokenAccount() []byte {
	if x != nil {
		return x.QuoteTokenAccount
	}
	return nil
}

func (x *TradeEvent) GetUserWallet() []byte {
	if x != nil {
		return x.UserWallet
	}
	return nil
}

func (x *TradeEvent) GetPairTokenBalance() uint64 {
	if x != nil {
		return x.PairTokenBalance
	}
	return 0
}

func (x *TradeEvent) GetPairQuoteBalance() uint64 {
	if x != nil {
		return x.PairQuoteBalance
	}
	return 0
}

func (x *TradeEvent) GetUserTokenBalance() uint64 {
	if x != nil {
		return x.UserTokenBalance
	}
	return 0
}

func (x *TradeEvent) GetUserQuoteBalance() uint64 {
	if x != nil {
		return x.UserQuoteBalance
	}
	return 0
}

// 转账事件
type TransferEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`
	EventId          uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` // 事件唯一ID（slot << 32 | tx_index << 16 | ix_index << 8 | inner_index）
	Slot             uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	BlockTime        int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	TxHash           []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Signers          [][]byte               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`                                               // 签名者地址列表（通常为交易的发起者们）
	Token            []byte                 `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`                                                   // 被转移token的mint地址
	SrcAccount       []byte                 `protobuf:"bytes,8,opt,name=src_account,json=srcAccount,proto3" json:"src_account,omitempty"`                       // 来源 token 账户地址
	DestAccount      []byte                 `protobuf:"bytes,9,opt,name=dest_account,json=destAccount,proto3" json:"dest_account,omitempty"`                    // 目标 token 账户地址
	SrcWallet        []byte                 `protobuf:"bytes,10,opt,name=src_wallet,json=srcWallet,proto3" json:"src_wallet,omitempty"`                         // 来源钱包地址（为src_account的owner）
	DestWallet       []byte                 `protobuf:"bytes,11,opt,name=dest_wallet,json=destWallet,proto3" json:"dest_wallet,omitempty"`                      // 目标钱包地址（为dest_account的owner）
	Amount           uint64                 `protobuf:"varint,12,opt,name=amount,proto3" json:"amount,omitempty"`                                               // 转账数量（原生单位）
	Decimals         uint32                 `protobuf:"varint,13,opt,name=decimals,proto3" json:"decimals,omitempty"`                                           // token 精度
	SrcTokenBalance  uint64                 `protobuf:"varint,14,opt,name=src_token_balance,json=srcTokenBalance,proto3" json:"src_token_balance,omitempty"`    // 转账后，来源账户余额
	DestTokenBalance uint64                 `protobuf:"varint,15,opt,name=dest_token_balance,json=destTokenBalance,proto3" json:"dest_token_balance,omitempty"` // 转账后，目标账户余额
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransferEvent) Reset() {
	*x = TransferEvent{}
	mi := &file_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferEvent) ProtoMessage() {}

func (x *TransferEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferEvent.ProtoReflect.Descriptor instead.
func (*TransferEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *TransferEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *TransferEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *TransferEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *TransferEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *TransferEvent) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TransferEvent) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *TransferEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TransferEvent) GetSrcAccount() []byte {
	if x != nil {
		return x.SrcAccount
	}
	return nil
}

func (x *TransferEvent) GetDestAccount() []byte {
	if x != nil {
		return x.DestAccount
	}
	return nil
}

func (x *TransferEvent) GetSrcWallet() []byte {
	if x != nil {
		return x.SrcWallet
	}
	return nil
}

func (x *TransferEvent) GetDestWallet() []byte {
	if x != nil {
		return x.DestWallet
	}
	return nil
}

func (x *TransferEvent) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferEvent) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TransferEvent) GetSrcTokenBalance() uint64 {
	if x != nil {
		return x.SrcTokenBalance
	}
	return 0
}

func (x *TransferEvent) GetDestTokenBalance() uint64 {
	if x != nil {
		return x.DestTokenBalance
	}
	return 0
}

// 添加/移除流动性事件（token统一表示base token）
type LiquidityEvent struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Type                   EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`                                                     // 事件类型，如 AddLiquidity、RemoveLiquidity 等
	EventId                uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                                  // 事件唯一ID（slot << 32 | tx_index << 16 | ix_index << 8 | inner_index）
	Slot                   uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                                                                       // 区块 Slot 高度
	BlockTime              int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`                                            // 区块时间戳（秒级）
	TxHash                 []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                                                      // 交易哈希
	Signers                [][]byte               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`                                                                  // 签名者地址列表（通常为交易的发起者们）
	UserWallet             []byte                 `protobuf:"bytes,7,opt,name=user_wallet,json=userWallet,proto3" json:"user_wallet,omitempty"`                                          // 用户钱包地址（通常与 signers 一致）
	TokenDecimals          uint32                 `protobuf:"varint,8,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`                                // token（即 base token）的精度
	QuoteDecimals          uint32                 `protobuf:"varint,9,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`                                // quote token 的精度
	Dex                    uint32                 `protobuf:"varint,10,opt,name=dex,proto3" json:"dex,omitempty"`                                                                        // 所属 DEX 平台编号（例如 RaydiumV4 = 1）
	TokenAmount            uint64                 `protobuf:"varint,11,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`                                     // token 添加/移除的数量（base token）
	QuoteTokenAmount       uint64                 `protobuf:"varint,12,opt,name=quote_token_amount,json=quoteTokenAmount,proto3" json:"quote_token_amount,omitempty"`                    // quote token 添加/移除的数量
	Token                  []byte                 `protobuf:"bytes,13,opt,name=token,proto3" json:"token,omitempty"`                                                                     // token 的 mint 地址（base token）
	QuoteToken             []byte                 `protobuf:"bytes,14,opt,name=quote_token,json=quoteToken,proto3" json:"quote_token,omitempty"`                                         // quote token 的 mint 地址
	PairAddress            []byte                 `protobuf:"bytes,15,opt,name=pair_address,json=pairAddress,proto3" json:"pair_address,omitempty"`                                      // 池子地址（如 AMM 池或交易对地址）
	TokenAccount           []byte                 `protobuf:"bytes,16,opt,name=token_account,json=tokenAccount,proto3" json:"token_account,omitempty"`                                   // 池子中 token 的账户地址
	QuoteTokenAccount      []byte                 `protobuf:"bytes,17,opt,name=quote_token_account,json=quoteTokenAccount,proto3" json:"quote_token_account,omitempty"`                  // 池子中 quote token 的账户地址
	TokenAccountOwner      []byte                 `protobuf:"bytes,18,opt,name=token_account_owner,json=tokenAccountOwner,proto3" json:"token_account_owner,omitempty"`                  // 池子 token 账户的所有者
	QuoteTokenAccountOwner []byte                 `protobuf:"bytes,19,opt,name=quote_token_account_owner,json=quoteTokenAccountOwner,proto3" json:"quote_token_account_owner,omitempty"` // 池子 quote token 账户的所有者
	PairTokenBalance       uint64                 `protobuf:"varint,20,opt,name=pair_token_balance,json=pairTokenBalance,proto3" json:"pair_token_balance,omitempty"`                    // 当前池子中 token 的余额（base token）
	PairQuoteBalance       uint64                 `protobuf:"varint,21,opt,name=pair_quote_balance,json=pairQuoteBalance,proto3" json:"pair_quote_balance,omitempty"`                    // 当前池子中 quote token 的余额
	UserTokenBalance       uint64                 `protobuf:"varint,22,opt,name=user_token_balance,json=userTokenBalance,proto3" json:"user_token_balance,omitempty"`                    // 用户 token 的余额（base token）
	UserQuoteBalance       uint64                 `protobuf:"varint,23,opt,name=user_quote_balance,json=userQuoteBalance,proto3" json:"user_quote_balance,omitempty"`                    // 用户 quote token 的余额
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LiquidityEvent) Reset() {
	*x = LiquidityEvent{}
	mi := &file_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiquidityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityEvent) ProtoMessage() {}

func (x *LiquidityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityEvent.ProtoReflect.Descriptor instead.
func (*LiquidityEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *LiquidityEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *LiquidityEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *LiquidityEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *LiquidityEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *LiquidityEvent) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *LiquidityEvent) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *LiquidityEvent) GetUserWallet() []byte {
	if x != nil {
		return x.UserWallet
	}
	return nil
}

func (x *LiquidityEvent) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *LiquidityEvent) GetQuoteDecimals() uint32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

func (x *LiquidityEvent) GetDex() uint32 {
	if x != nil {
		return x.Dex
	}
	return 0
}

func (x *LiquidityEvent) GetTokenAmount() uint64 {
	if x != nil {
		return x.TokenAmount
	}
	return 0
}

func (x *LiquidityEvent) GetQuoteTokenAmount() uint64 {
	if x != nil {
		return x.QuoteTokenAmount
	}
	return 0
}

func (x *LiquidityEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LiquidityEvent) GetQuoteToken() []byte {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

func (x *LiquidityEvent) GetPairAddress() []byte {
	if x != nil {
		return x.PairAddress
	}
	return nil
}

func (x *LiquidityEvent) GetTokenAccount() []byte {
	if x != nil {
		return x.TokenAccount
	}
	return nil
}

func (x *LiquidityEvent) GetQuoteTokenAccount() []byte {
	if x != nil {
		return x.QuoteTokenAccount
	}
	return nil
}

func (x *LiquidityEvent) GetTokenAccountOwner() []byte {
	if x != nil {
		return x.TokenAccountOwner
	}
	return nil
}

func (x *LiquidityEvent) GetQuoteTokenAccountOwner() []byte {
	if x != nil {
		return x.QuoteTokenAccountOwner
	}
	return nil
}

func (x *LiquidityEvent) GetPairTokenBalance() uint64 {
	if x != nil {
		return x.PairTokenBalance
	}
	return 0
}

func (x *LiquidityEvent) GetPairQuoteBalance() uint64 {
	if x != nil {
		return x.PairQuoteBalance
	}
	return 0
}

func (x *LiquidityEvent) GetUserTokenBalance() uint64 {
	if x != nil {
		return x.UserTokenBalance
	}
	return 0
}

func (x *LiquidityEvent) GetUserQuoteBalance() uint64 {
	if x != nil {
		return x.UserQuoteBalance
	}
	return 0
}

// 铸币事件
type MintToEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`                            // 事件类型（MINT_TO）
	EventId        uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                         // 事件唯一ID（slot << 32 | tx_index << 16 | ix_index << 8 | inner_index）
	Slot           uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                                              // 区块 slot
	BlockTime      int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`                   // 区块时间（Unix 秒）
	TxHash         []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                             // 交易哈希
	Signers        [][]byte               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`                                         // 签名者地址列表（通常为交易的发起者们）
	Token          []byte                 `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`                                             // 被铸造 token 的 mint 地址
	ToAddress      []byte                 `protobuf:"bytes,8,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`                    // 接收者钱包地址
	ToTokenAccount []byte                 `protobuf:"bytes,9,opt,name=to_token_account,json=toTokenAccount,proto3" json:"to_token_account,omitempty"`   // 接收者 token account 地址
	Amount         uint64                 `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`                                         // 铸造的数量（原生单位）
	Decimals       uint32                 `protobuf:"varint,11,opt,name=decimals,proto3" json:"decimals,omitempty"`                                     // token 精度
	ToTokenBalance uint64                 `protobuf:"varint,12,opt,name=to_token_balance,json=toTokenBalance,proto3" json:"to_token_balance,omitempty"` // 铸造后的 token account 余额
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MintToEvent) Reset() {
	*x = MintToEvent{}
	mi := &file_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintToEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintToEvent) ProtoMessage() {}

func (x *MintToEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintToEvent.ProtoReflect.Descriptor instead.
func (*MintToEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *MintToEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *MintToEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *MintToEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *MintToEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *MintToEvent) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *MintToEvent) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *MintToEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *MintToEvent) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *MintToEvent) GetToTokenAccount() []byte {
	if x != nil {
		return x.ToTokenAccount
	}
	return nil
}

func (x *MintToEvent) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintToEvent) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *MintToEvent) GetToTokenBalance() uint64 {
	if x != nil {
		return x.ToTokenBalance
	}
	return 0
}

// 销毁事件
type BurnEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`                                  // 事件类型（BURN）
	EventId          uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                               // 事件唯一ID（slot << 32 | tx_index << 16 | ix_index << 8 | inner_index）
	Slot             uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                                                    // 区块 slot
	BlockTime        int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`                         // 区块时间（Unix 秒）
	TxHash           []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                                   // 交易哈希
	Signers          [][]byte               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`                                               // 签名者地址列表（通常为交易的发起者们）
	Token            []byte                 `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`                                                   // 被销毁 token 的 mint 地址
	FromAddress      []byte                 `protobuf:"bytes,8,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`                    // 发起者钱包地址
	FromTokenAccount []byte                 `protobuf:"bytes,9,opt,name=from_token_account,json=fromTokenAccount,proto3" json:"from_token_account,omitempty"`   // 销毁操作的 token account 地址
	Amount           uint64                 `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`                                               // 被销毁的数量（原生单位）
	Decimals         uint32                 `protobuf:"varint,11,opt,name=decimals,proto3" json:"decimals,omitempty"`                                           // token 精度
	FromTokenBalance uint64                 `protobuf:"varint,12,opt,name=from_token_balance,json=fromTokenBalance,proto3" json:"from_token_balance,omitempty"` // 销毁后的 token account 余额
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BurnEvent) Reset() {
	*x = BurnEvent{}
	mi := &file_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BurnEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnEvent) ProtoMessage() {}

func (x *BurnEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnEvent.ProtoReflect.Descriptor instead.
func (*BurnEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *BurnEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *BurnEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *BurnEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BurnEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *BurnEvent) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *BurnEvent) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *BurnEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *BurnEvent) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *BurnEvent) GetFromTokenAccount() []byte {
	if x != nil {
		return x.FromTokenAccount
	}
	return nil
}

func (x *BurnEvent) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BurnEvent) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *BurnEvent) GetFromTokenBalance() uint64 {
	if x != nil {
		return x.FromTokenBalance
	}
	return 0
}

// 余额变更事件（如非交易引起的变动，单独记录）
type BalanceUpdateEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`                // 事件类型（BALANCE_UPDATE）
	EventId       uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`             // 事件唯一ID（slot << 32 | tx_index << 16 | inner_index）
	Slot          uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                                  // 区块 slot
	BlockTime     int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`       // 区块时间（Unix 秒级时间戳）
	Token         []byte                 `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`                                 // token mint 地址
	Account       []byte                 `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`                             // token account 地址（SPL token）
	Owner         []byte                 `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`                                 // 账户拥有者（钱包地址）
	PreBalance    uint64                 `protobuf:"varint,8,opt,name=pre_balance,json=preBalance,proto3" json:"pre_balance,omitempty"`    // 变更前余额
	PostBalance   uint64                 `protobuf:"varint,9,opt,name=post_balance,json=postBalance,proto3" json:"post_balance,omitempty"` // 变更后余额
	Decimals      uint32                 `protobuf:"varint,10,opt,name=decimals,proto3" json:"decimals,omitempty"`                         // token 精度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceUpdateEvent) Reset() {
	*x = BalanceUpdateEvent{}
	mi := &file_event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceUpdateEvent) ProtoMessage() {}

func (x *BalanceUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceUpdateEvent.ProtoReflect.Descriptor instead.
func (*BalanceUpdateEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{8}
}

func (x *BalanceUpdateEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *BalanceUpdateEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *BalanceUpdateEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BalanceUpdateEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *BalanceUpdateEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *BalanceUpdateEvent) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *BalanceUpdateEvent) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *BalanceUpdateEvent) GetPreBalance() uint64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *BalanceUpdateEvent) GetPostBalance() uint64 {
	if x != nil {
		return x.PostBalance
	}
	return 0
}

func (x *BalanceUpdateEvent) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type MigrateEvent struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Type                       EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`                                                                   // 事件类型（MIGRATE）
	EventId                    uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                                                // 事件唯一 ID（slot << 32 | tx_index << 16 | ix_index << 8 | inner_index）
	Slot                       uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                                                                                     // 区块高度
	BlockTime                  int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`                                                          // 区块时间戳（秒）
	TxHash                     []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                                                                    // 交易哈希
	Signers                    [][]byte               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`                                                                                // 签名者地址列表
	UserWallet                 []byte                 `protobuf:"bytes,7,opt,name=user_wallet,json=userWallet,proto3" json:"user_wallet,omitempty"`                                                        // 用户地址，可能是代理操作地址（如 Pump.fun: Migration），不一定是实际用户钱包
	DestPoolCreator            []byte                 `protobuf:"bytes,8,opt,name=dest_pool_creator,json=destPoolCreator,proto3" json:"dest_pool_creator,omitempty"`                                       // 新池创建者
	SrcDex                     uint32                 `protobuf:"varint,9,opt,name=src_dex,json=srcDex,proto3" json:"src_dex,omitempty"`                                                                   // 来源 DEX 编号（如 Pump.fun = 4）
	DestDex                    uint32                 `protobuf:"varint,10,opt,name=dest_dex,json=destDex,proto3" json:"dest_dex,omitempty"`                                                               // 目标 DEX 编号（如 Pump.fun AMM = 3）
	TokenDecimals              uint32                 `protobuf:"varint,11,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`                                             // base token 精度
	QuoteDecimals              uint32                 `protobuf:"varint,12,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`                                             // quote token 精度
	TokenAmount                uint64                 `protobuf:"varint,13,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`                                                   // base token 数量
	QuoteTokenAmount           uint64                 `protobuf:"varint,14,opt,name=quote_token_amount,json=quoteTokenAmount,proto3" json:"quote_token_amount,omitempty"`                                  // quote token 数量
	MigrationFee               uint64                 `protobuf:"varint,15,opt,name=migration_fee,json=migrationFee,proto3" json:"migration_fee,omitempty"`                                                // 迁移手续费
	Token                      []byte                 `protobuf:"bytes,16,opt,name=token,proto3" json:"token,omitempty"`                                                                                   // base token mint
	SrcQuoteToken              []byte                 `protobuf:"bytes,17,opt,name=src_quote_token,json=srcQuoteToken,proto3" json:"src_quote_token,omitempty"`                                            // 来源 quote token（如 SOL）
	DestQuoteToken             []byte                 `protobuf:"bytes,18,opt,name=dest_quote_token,json=destQuoteToken,proto3" json:"dest_quote_token,omitempty"`                                         // 目标 quote token（如 WSOL）
	SrcPairAddress             []byte                 `protobuf:"bytes,19,opt,name=src_pair_address,json=srcPairAddress,proto3" json:"src_pair_address,omitempty"`                                         // 来源池地址
	DestPairAddress            []byte                 `protobuf:"bytes,20,opt,name=dest_pair_address,json=destPairAddress,proto3" json:"dest_pair_address,omitempty"`                                      // 目标池地址
	SrcTokenAccount            []byte                 `protobuf:"bytes,21,opt,name=src_token_account,json=srcTokenAccount,proto3" json:"src_token_account,omitempty"`                                      // 来源池 base token account
	DestTokenAccount           []byte                 `protobuf:"bytes,22,opt,name=dest_token_account,json=destTokenAccount,proto3" json:"dest_token_account,omitempty"`                                   // 目标池 base token account
	SrcQuoteTokenAccount       []byte                 `protobuf:"bytes,23,opt,name=src_quote_token_account,json=srcQuoteTokenAccount,proto3" json:"src_quote_token_account,omitempty"`                     // 来源池 quote token account
	DestQuoteTokenAccount      []byte                 `protobuf:"bytes,24,opt,name=dest_quote_token_account,json=destQuoteTokenAccount,proto3" json:"dest_quote_token_account,omitempty"`                  // 目标池 quote token account
	SrcTokenAccountOwner       []byte                 `protobuf:"bytes,25,opt,name=src_token_account_owner,json=srcTokenAccountOwner,proto3" json:"src_token_account_owner,omitempty"`                     // 来源池 base token account 所有者
	DestTokenAccountOwner      []byte                 `protobuf:"bytes,26,opt,name=dest_token_account_owner,json=destTokenAccountOwner,proto3" json:"dest_token_account_owner,omitempty"`                  // 目标池 base token account 所有者
	SrcQuoteTokenAccountOwner  []byte                 `protobuf:"bytes,27,opt,name=src_quote_token_account_owner,json=srcQuoteTokenAccountOwner,proto3" json:"src_quote_token_account_owner,omitempty"`    // 来源池 quote token account 所有者
	DestQuoteTokenAccountOwner []byte                 `protobuf:"bytes,28,opt,name=dest_quote_token_account_owner,json=destQuoteTokenAccountOwner,proto3" json:"dest_quote_token_account_owner,omitempty"` // 目标池 quote token account 所有者
	SrcPairTokenBalance        uint64                 `protobuf:"varint,29,opt,name=src_pair_token_balance,json=srcPairTokenBalance,proto3" json:"src_pair_token_balance,omitempty"`                       // 来源池 base token 余额
	SrcPairQuoteBalance        uint64                 `protobuf:"varint,30,opt,name=src_pair_quote_balance,json=srcPairQuoteBalance,proto3" json:"src_pair_quote_balance,omitempty"`                       // 来源池 quote token 余额
	DestPairTokenBalance       uint64                 `protobuf:"varint,31,opt,name=dest_pair_token_balance,json=destPairTokenBalance,proto3" json:"dest_pair_token_balance,omitempty"`                    // 目标池 base token 余额
	DestPairQuoteBalance       uint64                 `protobuf:"varint,32,opt,name=dest_pair_quote_balance,json=destPairQuoteBalance,proto3" json:"dest_pair_quote_balance,omitempty"`                    // 目标池 quote token 余额
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *MigrateEvent) Reset() {
	*x = MigrateEvent{}
	mi := &file_event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateEvent) ProtoMessage() {}

func (x *MigrateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateEvent.ProtoReflect.Descriptor instead.
func (*MigrateEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9}
}

func (x *MigrateEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *MigrateEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *MigrateEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *MigrateEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *MigrateEvent) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *MigrateEvent) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *MigrateEvent) GetUserWallet() []byte {
	if x != nil {
		return x.UserWallet
	}
	return nil
}

func (x *MigrateEvent) GetDestPoolCreator() []byte {
	if x != nil {
		return x.DestPoolCreator
	}
	return nil
}

func (x *MigrateEvent) GetSrcDex() uint32 {
	if x != nil {
		return x.SrcDex
	}
	return 0
}

func (x *MigrateEvent) GetDestDex() uint32 {
	if x != nil {
		return x.DestDex
	}
	return 0
}

func (x *MigrateEvent) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *MigrateEvent) GetQuoteDecimals() uint32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

func (x *MigrateEvent) GetTokenAmount() uint64 {
	if x != nil {
		return x.TokenAmount
	}
	return 0
}

func (x *MigrateEvent) GetQuoteTokenAmount() uint64 {
	if x != nil {
		return x.QuoteTokenAmount
	}
	return 0
}

func (x *MigrateEvent) GetMigrationFee() uint64 {
	if x != nil {
		return x.MigrationFee
	}
	return 0
}

func (x *MigrateEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *MigrateEvent) GetSrcQuoteToken() []byte {
	if x != nil {
		return x.SrcQuoteToken
	}
	return nil
}

func (x *MigrateEvent) GetDestQuoteToken() []byte {
	if x != nil {
		return x.DestQuoteToken
	}
	return nil
}

func (x *MigrateEvent) GetSrcPairAddress() []byte {
	if x != nil {
		return x.SrcPairAddress
	}
	return nil
}

func (x *MigrateEvent) GetDestPairAddress() []byte {
	if x != nil {
		return x.DestPairAddress
	}
	return nil
}

func (x *MigrateEvent) GetSrcTokenAccount() []byte {
	if x != nil {
		return x.SrcTokenAccount
	}
	return nil
}

func (x *MigrateEvent) GetDestTokenAccount() []byte {
	if x != nil {
		return x.DestTokenAccount
	}
	return nil
}

func (x *MigrateEvent) GetSrcQuoteTokenAccount() []byte {
	if x != nil {
		return x.SrcQuoteTokenAccount
	}
	return nil
}

func (x *MigrateEvent) GetDestQuoteTokenAccount() []byte {
	if x != nil {
		return x.DestQuoteTokenAccount
	}
	return nil
}

func (x *MigrateEvent) GetSrcTokenAccountOwner() []byte {
	if x != nil {
		return x.SrcTokenAccountOwner
	}
	return nil
}

func (x *MigrateEvent) GetDestTokenAccountOwner() []byte {
	if x != nil {
		return x.DestTokenAccountOwner
	}
	return nil
}

func (x *MigrateEvent) GetSrcQuoteTokenAccountOwner() []byte {
	if x != nil {
		return x.SrcQuoteTokenAccountOwner
	}
	return nil
}

func (x *MigrateEvent) GetDestQuoteTokenAccountOwner() []byte {
	if x != nil {
		return x.DestQuoteTokenAccountOwner
	}
	return nil
}

func (x *MigrateEvent) GetSrcPairTokenBalance() uint64 {
	if x != nil {
		return x.SrcPairTokenBalance
	}
	return 0
}

func (x *MigrateEvent) GetSrcPairQuoteBalance() uint64 {
	if x != nil {
		return x.SrcPairQuoteBalance
	}
	return 0
}

func (x *MigrateEvent) GetDestPairTokenBalance() uint64 {
	if x != nil {
		return x.DestPairTokenBalance
	}
	return 0
}

func (x *MigrateEvent) GetDestPairQuoteBalance() uint64 {
	if x != nil {
		return x.DestPairQuoteBalance
	}
	return 0
}

type LaunchpadTokenEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`                 // 事件类型（LAUNCH_TOKEN）
	EventId       uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`              // 事件唯一 ID
	Slot          uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`                                   // 区块高度
	BlockTime     int64                  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`        // 区块时间戳（秒）
	TxHash        []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                  // 交易哈希
	Signers       [][]byte               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`                              // 签名者地址列表
	UserWallet    []byte                 `protobuf:"bytes,7,opt,name=user_wallet,json=userWallet,proto3" json:"user_wallet,omitempty"`      // 用户地址
	Creator       []byte                 `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`                              // 创建者地址（token creator）
	Decimals      uint32                 `protobuf:"varint,9,opt,name=decimals,proto3" json:"decimals,omitempty"`                           // 精度
	Dex           uint32                 `protobuf:"varint,10,opt,name=dex,proto3" json:"dex,omitempty"`                                    // 来源 DEX 编号（如 Pump.fun = 4）
	TotalSupply   uint64                 `protobuf:"varint,11,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"` // 初始总发行量
	Token         []byte                 `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`                                 // token address
	PairAddress   []byte                 `protobuf:"bytes,13,opt,name=pair_address,json=pairAddress,proto3" json:"pair_address,omitempty"`  // 初始交易池地址（可选）
	Symbol        string                 `protobuf:"bytes,14,opt,name=symbol,proto3" json:"symbol,omitempty"`                               // 符号（如 WEN）
	Name          string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                   // 名称
	Uri           string                 `protobuf:"bytes,16,opt,name=uri,proto3" json:"uri,omitempty"`                                     // 元数据 URI
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LaunchpadTokenEvent) Reset() {
	*x = LaunchpadTokenEvent{}
	mi := &file_event_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchpadTokenEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchpadTokenEvent) ProtoMessage() {}

func (x *LaunchpadTokenEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchpadTokenEvent.ProtoReflect.Descriptor instead.
func (*LaunchpadTokenEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{10}
}

func (x *LaunchpadTokenEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *LaunchpadTokenEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *LaunchpadTokenEvent) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *LaunchpadTokenEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *LaunchpadTokenEvent) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *LaunchpadTokenEvent) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *LaunchpadTokenEvent) GetUserWallet() []byte {
	if x != nil {
		return x.UserWallet
	}
	return nil
}

func (x *LaunchpadTokenEvent) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *LaunchpadTokenEvent) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *LaunchpadTokenEvent) GetDex() uint32 {
	if x != nil {
		return x.Dex
	}
	return 0
}

func (x *LaunchpadTokenEvent) GetTotalSupply() uint64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *LaunchpadTokenEvent) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LaunchpadTokenEvent) GetPairAddress() []byte {
	if x != nil {
		return x.PairAddress
	}
	return nil
}

func (x *LaunchpadTokenEvent) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *LaunchpadTokenEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaunchpadTokenEvent) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

var File_event_proto protoreflect.FileDescriptor

const file_event_proto_rawDesc = "" +
	"\n" +
	"\vevent.proto\x12\x02pb\"\xde\x01\n" +
	"\x06Events\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x19\n" +
	"\bchain_id\x18\x02 \x01(\rR\achainId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x16\n" +
	"\x06source\x18\x04 \x01(\x05R\x06source\x12!\n" +
	"\x06events\x18\x05 \x03(\v2\t.pb.EventR\x06events\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x06 \x01(\fR\tblockHash\x121\n" +
	"\fquote_prices\x18\a \x03(\v2\x0e.pb.TokenPriceR\vquotePrices\"T\n" +
	"\n" +
	"TokenPrice\x12\x14\n" +
	"\x05token\x18\x01 \x01(\fR\x05token\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12\x1a\n" +
	"\bdecimals\x18\x03 \x01(\rR\bdecimals\"\xfc\x02\n" +
	"\x05Event\x12&\n" +
	"\x05trade\x18\x01 \x01(\v2\x0e.pb.TradeEventH\x00R\x05trade\x12/\n" +
	"\btransfer\x18\x02 \x01(\v2\x11.pb.TransferEventH\x00R\btransfer\x122\n" +
	"\tliquidity\x18\x03 \x01(\v2\x12.pb.LiquidityEventH\x00R\tliquidity\x12%\n" +
	"\x04mint\x18\x04 \x01(\v2\x0f.pb.MintToEventH\x00R\x04mint\x12#\n" +
	"\x04burn\x18\x05 \x01(\v2\r.pb.BurnEventH\x00R\x04burn\x122\n" +
	"\abalance\x18\x06 \x01(\v2\x16.pb.BalanceUpdateEventH\x00R\abalance\x12,\n" +
	"\amigrate\x18\a \x01(\v2\x10.pb.MigrateEventH\x00R\amigrate\x12/\n" +
	"\x05token\x18\b \x01(\v2\x17.pb.LaunchpadTokenEventH\x00R\x05tokenB\a\n" +
	"\x05event\"\xa5\x06\n" +
	"\n" +
	"TradeEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x17\n" +
	"\atx_hash\x18\x05 \x01(\fR\x06txHash\x12\x18\n" +
	"\asigners\x18\x06 \x03(\fR\asigners\x12%\n" +
	"\x0etoken_decimals\x18\a \x01(\rR\rtokenDecimals\x12%\n" +
	"\x0equote_decimals\x18\b \x01(\rR\rquoteDecimals\x12\x10\n" +
	"\x03dex\x18\t \x01(\rR\x03dex\x12\x1d\n" +
	"\n" +
	"amount_usd\x18\n" +
	" \x01(\x01R\tamountUsd\x12\x1b\n" +
	"\tprice_usd\x18\v \x01(\x01R\bpriceUsd\x12!\n" +
	"\ftoken_amount\x18\f \x01(\x04R\vtokenAmount\x12,\n" +
	"\x12quote_token_amount\x18\r \x01(\x04R\x10quoteTokenAmount\x12\x14\n" +
	"\x05token\x18\x0e \x01(\fR\x05token\x12\x1f\n" +
	"\vquote_token\x18\x0f \x01(\fR\n" +
	"quoteToken\x12!\n" +
	"\fpair_address\x18\x10 \x01(\fR\vpairAddress\x12#\n" +
	"\rtoken_account\x18\x11 \x01(\fR\ftokenAccount\x12.\n" +
	"\x13quote_token_account\x18\x12 \x01(\fR\x11quoteTokenAccount\x12\x1f\n" +
	"\vuser_wallet\x18\x13 \x01(\fR\n" +
	"userWallet\x12,\n" +
	"\x12pair_token_balance\x18\x14 \x01(\x04R\x10pairTokenBalance\x12,\n" +
	"\x12pair_quote_balance\x18\x15 \x01(\x04R\x10pairQuoteBalance\x12,\n" +
	"\x12user_token_balance\x18\x16 \x01(\x04R\x10userTokenBalance\x12,\n" +
	"\x12user_quote_balance\x18\x17 \x01(\x04R\x10userQuoteBalance\"\xdb\x03\n" +
	"\rTransferEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x17\n" +
	"\atx_hash\x18\x05 \x01(\fR\x06txHash\x12\x18\n" +
	"\asigners\x18\x06 \x03(\fR\asigners\x12\x14\n" +
	"\x05token\x18\a \x01(\fR\x05token\x12\x1f\n" +
	"\vsrc_account\x18\b \x01(\fR\n" +
	"srcAccount\x12!\n" +
	"\fdest_account\x18\t \x01(\fR\vdestAccount\x12\x1d\n" +
	"\n" +
	"src_wallet\x18\n" +
	" \x01(\fR\tsrcWallet\x12\x1f\n" +
	"\vdest_wallet\x18\v \x01(\fR\n" +
	"destWallet\x12\x16\n" +
	"\x06amount\x18\f \x01(\x04R\x06amount\x12\x1a\n" +
	"\bdecimals\x18\r \x01(\rR\bdecimals\x12*\n" +
	"\x11src_token_balance\x18\x0e \x01(\x04R\x0fsrcTokenBalance\x12,\n" +
	"\x12dest_token_balance\x18\x0f \x01(\x04R\x10destTokenBalance\"\xd8\x06\n" +
	"\x0eLiquidityEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x17\n" +
	"\atx_hash\x18\x05 \x01(\fR\x06txHash\x12\x18\n" +
	"\asigners\x18\x06 \x03(\fR\asigners\x12\x1f\n" +
	"\vuser_wallet\x18\a \x01(\fR\n" +
	"userWallet\x12%\n" +
	"\x0etoken_decimals\x18\b \x01(\rR\rtokenDecimals\x12%\n" +
	"\x0equote_decimals\x18\t \x01(\rR\rquoteDecimals\x12\x10\n" +
	"\x03dex\x18\n" +
	" \x01(\rR\x03dex\x12!\n" +
	"\ftoken_amount\x18\v \x01(\x04R\vtokenAmount\x12,\n" +
	"\x12quote_token_amount\x18\f \x01(\x04R\x10quoteTokenAmount\x12\x14\n" +
	"\x05token\x18\r \x01(\fR\x05token\x12\x1f\n" +
	"\vquote_token\x18\x0e \x01(\fR\n" +
	"quoteToken\x12!\n" +
	"\fpair_address\x18\x0f \x01(\fR\vpairAddress\x12#\n" +
	"\rtoken_account\x18\x10 \x01(\fR\ftokenAccount\x12.\n" +
	"\x13quote_token_account\x18\x11 \x01(\fR\x11quoteTokenAccount\x12.\n" +
	"\x13token_account_owner\x18\x12 \x01(\fR\x11tokenAccountOwner\x129\n" +
	"\x19quote_token_account_owner\x18\x13 \x01(\fR\x16quoteTokenAccountOwner\x12,\n" +
	"\x12pair_token_balance\x18\x14 \x01(\x04R\x10pairTokenBalance\x12,\n" +
	"\x12pair_quote_balance\x18\x15 \x01(\x04R\x10pairQuoteBalance\x12,\n" +
	"\x12user_token_balance\x18\x16 \x01(\x04R\x10userTokenBalance\x12,\n" +
	"\x12user_quote_balance\x18\x17 \x01(\x04R\x10userQuoteBalance\"\xee\x02\n" +
	"\vMintToEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x17\n" +
	"\atx_hash\x18\x05 \x01(\fR\x06txHash\x12\x18\n" +
	"\asigners\x18\x06 \x03(\fR\asigners\x12\x14\n" +
	"\x05token\x18\a \x01(\fR\x05token\x12\x1d\n" +
	"\n" +
	"to_address\x18\b \x01(\fR\ttoAddress\x12(\n" +
	"\x10to_token_account\x18\t \x01(\fR\x0etoTokenAccount\x12\x16\n" +
	"\x06amount\x18\n" +
	" \x01(\x04R\x06amount\x12\x1a\n" +
	"\bdecimals\x18\v \x01(\rR\bdecimals\x12(\n" +
	"\x10to_token_balance\x18\f \x01(\x04R\x0etoTokenBalance\"\xf8\x02\n" +
	"\tBurnEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x17\n" +
	"\atx_hash\x18\x05 \x01(\fR\x06txHash\x12\x18\n" +
	"\asigners\x18\x06 \x03(\fR\asigners\x12\x14\n" +
	"\x05token\x18\a \x01(\fR\x05token\x12!\n" +
	"\ffrom_address\x18\b \x01(\fR\vfromAddress\x12,\n" +
	"\x12from_token_account\x18\t \x01(\fR\x10fromTokenAccount\x12\x16\n" +
	"\x06amount\x18\n" +
	" \x01(\x04R\x06amount\x12\x1a\n" +
	"\bdecimals\x18\v \x01(\rR\bdecimals\x12,\n" +
	"\x12from_token_balance\x18\f \x01(\x04R\x10fromTokenBalance\"\xab\x02\n" +
	"\x12BalanceUpdateEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x14\n" +
	"\x05token\x18\x05 \x01(\fR\x05token\x12\x18\n" +
	"\aaccount\x18\x06 \x01(\fR\aaccount\x12\x14\n" +
	"\x05owner\x18\a \x01(\fR\x05owner\x12\x1f\n" +
	"\vpre_balance\x18\b \x01(\x04R\n" +
	"preBalance\x12!\n" +
	"\fpost_balance\x18\t \x01(\x04R\vpostBalance\x12\x1a\n" +
	"\bdecimals\x18\n" +
	" \x01(\rR\bdecimals\"\xcd\n" +
	"\n" +
	"\fMigrateEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x17\n" +
	"\atx_hash\x18\x05 \x01(\fR\x06txHash\x12\x18\n" +
	"\asigners\x18\x06 \x03(\fR\asigners\x12\x1f\n" +
	"\vuser_wallet\x18\a \x01(\fR\n" +
	"userWallet\x12*\n" +
	"\x11dest_pool_creator\x18\b \x01(\fR\x0fdestPoolCreator\x12\x17\n" +
	"\asrc_dex\x18\t \x01(\rR\x06srcDex\x12\x19\n" +
	"\bdest_dex\x18\n" +
	" \x01(\rR\adestDex\x12%\n" +
	"\x0etoken_decimals\x18\v \x01(\rR\rtokenDecimals\x12%\n" +
	"\x0equote_decimals\x18\f \x01(\rR\rquoteDecimals\x12!\n" +
	"\ftoken_amount\x18\r \x01(\x04R\vtokenAmount\x12,\n" +
	"\x12quote_token_amount\x18\x0e \x01(\x04R\x10quoteTokenAmount\x12#\n" +
	"\rmigration_fee\x18\x0f \x01(\x04R\fmigrationFee\x12\x14\n" +
	"\x05token\x18\x10 \x01(\fR\x05token\x12&\n" +
	"\x0fsrc_quote_token\x18\x11 \x01(\fR\rsrcQuoteToken\x12(\n" +
	"\x10dest_quote_token\x18\x12 \x01(\fR\x0edestQuoteToken\x12(\n" +
	"\x10src_pair_address\x18\x13 \x01(\fR\x0esrcPairAddress\x12*\n" +
	"\x11dest_pair_address\x18\x14 \x01(\fR\x0fdestPairAddress\x12*\n" +
	"\x11src_token_account\x18\x15 \x01(\fR\x0fsrcTokenAccount\x12,\n" +
	"\x12dest_token_account\x18\x16 \x01(\fR\x10destTokenAccount\x125\n" +
	"\x17src_quote_token_account\x18\x17 \x01(\fR\x14srcQuoteTokenAccount\x127\n" +
	"\x18dest_quote_token_account\x18\x18 \x01(\fR\x15destQuoteTokenAccount\x125\n" +
	"\x17src_token_account_owner\x18\x19 \x01(\fR\x14srcTokenAccountOwner\x127\n" +
	"\x18dest_token_account_owner\x18\x1a \x01(\fR\x15destTokenAccountOwner\x12@\n" +
	"\x1dsrc_quote_token_account_owner\x18\x1b \x01(\fR\x19srcQuoteTokenAccountOwner\x12B\n" +
	"\x1edest_quote_token_account_owner\x18\x1c \x01(\fR\x1adestQuoteTokenAccountOwner\x123\n" +
	"\x16src_pair_token_balance\x18\x1d \x01(\x04R\x13srcPairTokenBalance\x123\n" +
	"\x16src_pair_quote_balance\x18\x1e \x01(\x04R\x13srcPairQuoteBalance\x125\n" +
	"\x17dest_pair_token_balance\x18\x1f \x01(\x04R\x14destPairTokenBalance\x125\n" +
	"\x17dest_pair_quote_balance\x18  \x01(\x04R\x14destPairQuoteBalance\"\xbc\x03\n" +
	"\x13LaunchpadTokenEvent\x12!\n" +
	"\x04type\x18\x01 \x01(\x0e2\r.pb.EventTypeR\x04type\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\x04R\aeventId\x12\x12\n" +
	"\x04slot\x18\x03 \x01(\x04R\x04slot\x12\x1d\n" +
	"\n" +
	"block_time\x18\x04 \x01(\x03R\tblockTime\x12\x17\n" +
	"\atx_hash\x18\x05 \x01(\fR\x06txHash\x12\x18\n" +
	"\asigners\x18\x06 \x03(\fR\asigners\x12\x1f\n" +
	"\vuser_wallet\x18\a \x01(\fR\n" +
	"userWallet\x12\x18\n" +
	"\acreator\x18\b \x01(\fR\acreator\x12\x1a\n" +
	"\bdecimals\x18\t \x01(\rR\bdecimals\x12\x10\n" +
	"\x03dex\x18\n" +
	" \x01(\rR\x03dex\x12!\n" +
	"\ftotal_supply\x18\v \x01(\x04R\vtotalSupply\x12\x14\n" +
	"\x05token\x18\f \x01(\fR\x05token\x12!\n" +
	"\fpair_address\x18\r \x01(\fR\vpairAddress\x12\x16\n" +
	"\x06symbol\x18\x0e \x01(\tR\x06symbol\x12\x12\n" +
	"\x04name\x18\x0f \x01(\tR\x04name\x12\x10\n" +
	"\x03uri\x18\x10 \x01(\tR\x03uri*\xae\x01\n" +
	"\aDexType\x12\x0f\n" +
	"\vDEX_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eDEX_RAYDIUM_V4\x10\x01\x12\x14\n" +
	"\x10DEX_RAYDIUM_CLMM\x10\x02\x12\x13\n" +
	"\x0fDEX_PUMPFUN_AMM\x10\x03\x12\x0f\n" +
	"\vDEX_PUMPFUN\x10\x04\x12\x14\n" +
	"\x10DEX_RAYDIUM_CPMM\x10\x05\x12\x14\n" +
	"\x10DEX_METEORA_DLMM\x10\x06\x12\x16\n" +
	"\x12DEX_ORCA_WHIRLPOOL\x10\a*\xdf\x01\n" +
	"\tEventType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\r\n" +
	"\tTRADE_BUY\x10\x01\x12\x0e\n" +
	"\n" +
	"TRADE_SELL\x10\x02\x12\f\n" +
	"\bTRANSFER\x10\x03\x12\x11\n" +
	"\rADD_LIQUIDITY\x10\x04\x12\x14\n" +
	"\x10REMOVE_LIQUIDITY\x10\x05\x12\v\n" +
	"\aMINT_TO\x10\x06\x12\b\n" +
	"\x04BURN\x10\a\x12\x11\n" +
	"\rTRADE_UNKNOWN\x10\b\x12\x0f\n" +
	"\vCREATE_POOL\x10\t\x12\v\n" +
	"\aMIGRATE\x10\n" +
	"\x12\x13\n" +
	"\x0fLAUNCHPAD_TOKEN\x10\v\x12\x12\n" +
	"\x0eBALANCE_UPDATE\x10<B\x16Z\x14dex-ingest-sol/pb;pbb\x06proto3"

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData []byte
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)))
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_event_proto_goTypes = []any{
	(DexType)(0),                // 0: pb.DexType
	(EventType)(0),              // 1: pb.EventType
	(*Events)(nil),              // 2: pb.Events
	(*TokenPrice)(nil),          // 3: pb.TokenPrice
	(*Event)(nil),               // 4: pb.Event
	(*TradeEvent)(nil),          // 5: pb.TradeEvent
	(*TransferEvent)(nil),       // 6: pb.TransferEvent
	(*LiquidityEvent)(nil),      // 7: pb.LiquidityEvent
	(*MintToEvent)(nil),         // 8: pb.MintToEvent
	(*BurnEvent)(nil),           // 9: pb.BurnEvent
	(*BalanceUpdateEvent)(nil),  // 10: pb.BalanceUpdateEvent
	(*MigrateEvent)(nil),        // 11: pb.MigrateEvent
	(*LaunchpadTokenEvent)(nil), // 12: pb.LaunchpadTokenEvent
}
var file_event_proto_depIdxs = []int32{
	4,  // 0: pb.Events.events:type_name -> pb.Event
	3,  // 1: pb.Events.quote_prices:type_name -> pb.TokenPrice
	5,  // 2: pb.Event.trade:type_name -> pb.TradeEvent
	6,  // 3: pb.Event.transfer:type_name -> pb.TransferEvent
	7,  // 4: pb.Event.liquidity:type_name -> pb.LiquidityEvent
	8,  // 5: pb.Event.mint:type_name -> pb.MintToEvent
	9,  // 6: pb.Event.burn:type_name -> pb.BurnEvent
	10, // 7: pb.Event.balance:type_name -> pb.BalanceUpdateEvent
	11, // 8: pb.Event.migrate:type_name -> pb.MigrateEvent
	12, // 9: pb.Event.token:type_name -> pb.LaunchpadTokenEvent
	1,  // 10: pb.TradeEvent.type:type_name -> pb.EventType
	1,  // 11: pb.TransferEvent.type:type_name -> pb.EventType
	1,  // 12: pb.LiquidityEvent.type:type_name -> pb.EventType
	1,  // 13: pb.MintToEvent.type:type_name -> pb.EventType
	1,  // 14: pb.BurnEvent.type:type_name -> pb.EventType
	1,  // 15: pb.BalanceUpdateEvent.type:type_name -> pb.EventType
	1,  // 16: pb.MigrateEvent.type:type_name -> pb.EventType
	1,  // 17: pb.LaunchpadTokenEvent.type:type_name -> pb.EventType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	file_event_proto_msgTypes[2].OneofWrappers = []any{
		(*Event_Trade)(nil),
		(*Event_Transfer)(nil),
		(*Event_Liquidity)(nil),
		(*Event_Mint)(nil),
		(*Event_Burn)(nil),
		(*Event_Balance)(nil),
		(*Event_Migrate)(nil),
		(*Event_Token)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
