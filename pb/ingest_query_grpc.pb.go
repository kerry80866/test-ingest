// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ingest_query.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngestQueryService_QueryEventsByIDs_FullMethodName        = "/pb.IngestQueryService/QueryEventsByIDs"
	IngestQueryService_QueryEventsByUser_FullMethodName       = "/pb.IngestQueryService/QueryEventsByUser"
	IngestQueryService_QueryEventsByPool_FullMethodName       = "/pb.IngestQueryService/QueryEventsByPool"
	IngestQueryService_QueryTransferEvents_FullMethodName     = "/pb.IngestQueryService/QueryTransferEvents"
	IngestQueryService_QueryTopHoldersByToken_FullMethodName  = "/pb.IngestQueryService/QueryTopHoldersByToken"
	IngestQueryService_QueryHolderCountByToken_FullMethodName = "/pb.IngestQueryService/QueryHolderCountByToken"
	IngestQueryService_QueryBalancesByOwner_FullMethodName    = "/pb.IngestQueryService/QueryBalancesByOwner"
	IngestQueryService_QueryBalancesByAccounts_FullMethodName = "/pb.IngestQueryService/QueryBalancesByAccounts"
	IngestQueryService_QueryPoolsByAddresses_FullMethodName   = "/pb.IngestQueryService/QueryPoolsByAddresses"
	IngestQueryService_QueryPoolsByToken_FullMethodName       = "/pb.IngestQueryService/QueryPoolsByToken"
)

// IngestQueryServiceClient is the client API for IngestQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestQueryServiceClient interface {
	QueryEventsByIDs(ctx context.Context, in *EventIDsReq, opts ...grpc.CallOption) (*EventListResp, error)
	QueryEventsByUser(ctx context.Context, in *UserEventReq, opts ...grpc.CallOption) (*EventResp, error)
	QueryEventsByPool(ctx context.Context, in *PoolEventReq, opts ...grpc.CallOption) (*EventResp, error)
	QueryTransferEvents(ctx context.Context, in *TransferEventQueryReq, opts ...grpc.CallOption) (*EventResp, error)
	QueryTopHoldersByToken(ctx context.Context, in *TokenTopReq, opts ...grpc.CallOption) (*HolderListResp, error)
	QueryHolderCountByToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*HolderCountResp, error)
	QueryBalancesByOwner(ctx context.Context, in *OwnerReq, opts ...grpc.CallOption) (*BalanceResp, error)
	QueryBalancesByAccounts(ctx context.Context, in *AccountsReq, opts ...grpc.CallOption) (*BalanceListResp, error)
	QueryPoolsByAddresses(ctx context.Context, in *PoolAddressesReq, opts ...grpc.CallOption) (*PoolListResp, error)
	QueryPoolsByToken(ctx context.Context, in *PoolTokenReq, opts ...grpc.CallOption) (*PoolResp, error)
}

type ingestQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestQueryServiceClient(cc grpc.ClientConnInterface) IngestQueryServiceClient {
	return &ingestQueryServiceClient{cc}
}

func (c *ingestQueryServiceClient) QueryEventsByIDs(ctx context.Context, in *EventIDsReq, opts ...grpc.CallOption) (*EventListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventListResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryEventsByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryEventsByUser(ctx context.Context, in *UserEventReq, opts ...grpc.CallOption) (*EventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryEventsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryEventsByPool(ctx context.Context, in *PoolEventReq, opts ...grpc.CallOption) (*EventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryEventsByPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryTransferEvents(ctx context.Context, in *TransferEventQueryReq, opts ...grpc.CallOption) (*EventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryTransferEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryTopHoldersByToken(ctx context.Context, in *TokenTopReq, opts ...grpc.CallOption) (*HolderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolderListResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryTopHoldersByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryHolderCountByToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*HolderCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolderCountResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryHolderCountByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryBalancesByOwner(ctx context.Context, in *OwnerReq, opts ...grpc.CallOption) (*BalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryBalancesByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryBalancesByAccounts(ctx context.Context, in *AccountsReq, opts ...grpc.CallOption) (*BalanceListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceListResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryBalancesByAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryPoolsByAddresses(ctx context.Context, in *PoolAddressesReq, opts ...grpc.CallOption) (*PoolListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoolListResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryPoolsByAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestQueryServiceClient) QueryPoolsByToken(ctx context.Context, in *PoolTokenReq, opts ...grpc.CallOption) (*PoolResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoolResp)
	err := c.cc.Invoke(ctx, IngestQueryService_QueryPoolsByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestQueryServiceServer is the server API for IngestQueryService service.
// All implementations must embed UnimplementedIngestQueryServiceServer
// for forward compatibility.
type IngestQueryServiceServer interface {
	QueryEventsByIDs(context.Context, *EventIDsReq) (*EventListResp, error)
	QueryEventsByUser(context.Context, *UserEventReq) (*EventResp, error)
	QueryEventsByPool(context.Context, *PoolEventReq) (*EventResp, error)
	QueryTransferEvents(context.Context, *TransferEventQueryReq) (*EventResp, error)
	QueryTopHoldersByToken(context.Context, *TokenTopReq) (*HolderListResp, error)
	QueryHolderCountByToken(context.Context, *TokenReq) (*HolderCountResp, error)
	QueryBalancesByOwner(context.Context, *OwnerReq) (*BalanceResp, error)
	QueryBalancesByAccounts(context.Context, *AccountsReq) (*BalanceListResp, error)
	QueryPoolsByAddresses(context.Context, *PoolAddressesReq) (*PoolListResp, error)
	QueryPoolsByToken(context.Context, *PoolTokenReq) (*PoolResp, error)
	mustEmbedUnimplementedIngestQueryServiceServer()
}

// UnimplementedIngestQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestQueryServiceServer struct{}

func (UnimplementedIngestQueryServiceServer) QueryEventsByIDs(context.Context, *EventIDsReq) (*EventListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEventsByIDs not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryEventsByUser(context.Context, *UserEventReq) (*EventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEventsByUser not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryEventsByPool(context.Context, *PoolEventReq) (*EventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEventsByPool not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryTransferEvents(context.Context, *TransferEventQueryReq) (*EventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransferEvents not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryTopHoldersByToken(context.Context, *TokenTopReq) (*HolderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTopHoldersByToken not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryHolderCountByToken(context.Context, *TokenReq) (*HolderCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHolderCountByToken not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryBalancesByOwner(context.Context, *OwnerReq) (*BalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalancesByOwner not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryBalancesByAccounts(context.Context, *AccountsReq) (*BalanceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalancesByAccounts not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryPoolsByAddresses(context.Context, *PoolAddressesReq) (*PoolListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolsByAddresses not implemented")
}
func (UnimplementedIngestQueryServiceServer) QueryPoolsByToken(context.Context, *PoolTokenReq) (*PoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolsByToken not implemented")
}
func (UnimplementedIngestQueryServiceServer) mustEmbedUnimplementedIngestQueryServiceServer() {}
func (UnimplementedIngestQueryServiceServer) testEmbeddedByValue()                            {}

// UnsafeIngestQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestQueryServiceServer will
// result in compilation errors.
type UnsafeIngestQueryServiceServer interface {
	mustEmbedUnimplementedIngestQueryServiceServer()
}

func RegisterIngestQueryServiceServer(s grpc.ServiceRegistrar, srv IngestQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedIngestQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngestQueryService_ServiceDesc, srv)
}

func _IngestQueryService_QueryEventsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryEventsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryEventsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryEventsByIDs(ctx, req.(*EventIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryEventsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryEventsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryEventsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryEventsByUser(ctx, req.(*UserEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryEventsByPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryEventsByPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryEventsByPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryEventsByPool(ctx, req.(*PoolEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryTransferEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEventQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryTransferEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryTransferEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryTransferEvents(ctx, req.(*TransferEventQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryTopHoldersByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenTopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryTopHoldersByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryTopHoldersByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryTopHoldersByToken(ctx, req.(*TokenTopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryHolderCountByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryHolderCountByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryHolderCountByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryHolderCountByToken(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryBalancesByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryBalancesByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryBalancesByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryBalancesByOwner(ctx, req.(*OwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryBalancesByAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryBalancesByAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryBalancesByAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryBalancesByAccounts(ctx, req.(*AccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryPoolsByAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolAddressesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryPoolsByAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryPoolsByAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryPoolsByAddresses(ctx, req.(*PoolAddressesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestQueryService_QueryPoolsByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestQueryServiceServer).QueryPoolsByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestQueryService_QueryPoolsByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestQueryServiceServer).QueryPoolsByToken(ctx, req.(*PoolTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestQueryService_ServiceDesc is the grpc.ServiceDesc for IngestQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IngestQueryService",
	HandlerType: (*IngestQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryEventsByIDs",
			Handler:    _IngestQueryService_QueryEventsByIDs_Handler,
		},
		{
			MethodName: "QueryEventsByUser",
			Handler:    _IngestQueryService_QueryEventsByUser_Handler,
		},
		{
			MethodName: "QueryEventsByPool",
			Handler:    _IngestQueryService_QueryEventsByPool_Handler,
		},
		{
			MethodName: "QueryTransferEvents",
			Handler:    _IngestQueryService_QueryTransferEvents_Handler,
		},
		{
			MethodName: "QueryTopHoldersByToken",
			Handler:    _IngestQueryService_QueryTopHoldersByToken_Handler,
		},
		{
			MethodName: "QueryHolderCountByToken",
			Handler:    _IngestQueryService_QueryHolderCountByToken_Handler,
		},
		{
			MethodName: "QueryBalancesByOwner",
			Handler:    _IngestQueryService_QueryBalancesByOwner_Handler,
		},
		{
			MethodName: "QueryBalancesByAccounts",
			Handler:    _IngestQueryService_QueryBalancesByAccounts_Handler,
		},
		{
			MethodName: "QueryPoolsByAddresses",
			Handler:    _IngestQueryService_QueryPoolsByAddresses_Handler,
		},
		{
			MethodName: "QueryPoolsByToken",
			Handler:    _IngestQueryService_QueryPoolsByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingest_query.proto",
}
